
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import arbolClases.ClaseBloque;
import arbolClases.ClaseCases;
import arbolClases.ClaseDimensiones;
import arbolClases.ClaseInstruccion;
import arbolClases.Constante;
import arbolClases.DeclaracionBloque;
import arbolClases.DeclaracionVariables;
import arbolClases.Expresion;
import arbolClases.ExpresionBinaria;
import arbolClases.ExpresionUnaria;
import arbolClases.FullBody;
import arbolClases.FuncionesAndCtes;
import arbolClases.Funtion;
import arbolClases.InsAsignacion;
import arbolClases.InstruccionCall;
import arbolClases.InstruccionFor;
import arbolClases.InstruccionIfElse;
import arbolClases.InstruccionReturn;
import arbolClases.InstruccionSwitch;
import arbolClases.InstruccionWhile;
import arbolClases.Parametros;
import arbolClases.ListaExpresiones;
import arbolClases.Programa;
import arbolClases.Tipo;
import arbolClases.TipoArray;
import arbolClases.TipoVar;
import arbolClases.Variable;
import errores.GestionErrores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\004\015\000" +
    "\002\005\005\000\002\005\004\000\002\005\005\000\002" +
    "\005\004\000\002\005\002\000\002\006\005\000\002\006" +
    "\006\000\002\006\005\000\002\006\006\000\002\007\010" +
    "\000\002\010\005\000\002\011\004\000\002\011\003\000" +
    "\002\012\007\000\002\013\004\000\002\013\005\000\002" +
    "\013\005\000\002\013\006\000\002\014\004\000\002\014" +
    "\005\000\002\015\004\000\002\015\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\004\000" +
    "\002\017\004\000\002\020\006\000\002\020\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\005\000\002\022\006\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\030\003\000\002\030\005\000\002\030\004\000\002\030" +
    "\006\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\004\000\002\031\003\000" +
    "\002\032\012\000\002\032\016\000\002\033\012\000\002" +
    "\034\016\000\002\035\007\000\002\036\011\000\002\036" +
    "\010\000\002\037\007\000\002\040\004\000\002\040\003" +
    "\000\002\040\002\000\002\041\005\000\002\041\004\000" +
    "\002\042\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\012\002\ufffe\005\005\010\012\031\004\001" +
    "\002\000\010\022\030\023\031\027\022\001\002\000\024" +
    "\011\042\013\035\014\054\020\041\026\037\030\034\032" +
    "\043\056\055\060\050\001\002\000\004\005\005\001\002" +
    "\000\004\002\267\001\002\000\010\005\ufffa\010\012\031" +
    "\004\001\002\000\004\002\uffff\001\002\000\004\032\015" +
    "\001\002\000\010\005\ufffb\010\012\031\004\001\002\000" +
    "\004\005\ufffd\001\002\000\004\024\016\001\002\000\004" +
    "\056\017\001\002\000\012\022\020\023\021\027\022\057" +
    "\ufff4\001\002\000\006\032\uffe2\056\137\001\002\000\006" +
    "\032\uffe1\056\137\001\002\000\006\032\uffe0\060\uffe0\001" +
    "\002\000\004\032\262\001\002\000\004\032\251\001\002" +
    "\000\004\057\026\001\002\000\004\025\027\001\002\000" +
    "\010\022\030\023\031\027\022\001\002\000\006\032\uffe2" +
    "\060\uffe2\001\002\000\006\032\uffe1\060\uffe1\001\002\000" +
    "\004\060\033\001\002\000\024\011\042\013\035\014\054" +
    "\020\041\026\037\030\034\032\043\056\055\060\050\001" +
    "\002\000\004\032\240\001\002\000\004\054\231\001\002" +
    "\000\004\033\uffd5\001\002\000\020\004\066\016\075\017" +
    "\100\030\034\032\101\050\077\054\102\001\002\000\004" +
    "\033\uffd9\001\002\000\004\054\215\001\002\000\004\054" +
    "\202\001\002\000\006\053\176\056\137\001\002\000\022" +
    "\011\042\013\035\014\054\020\041\026\037\030\034\032" +
    "\043\056\055\001\002\000\004\033\172\001\002\000\004" +
    "\033\uffd8\001\002\000\004\033\uffd6\001\002\000\004\007" +
    "\157\001\002\000\004\061\156\001\002\000\004\033\uffdb" +
    "\001\002\000\004\033\uffda\001\002\000\004\054\063\001" +
    "\002\000\024\011\042\013\035\014\054\020\041\026\037" +
    "\030\034\032\043\056\055\060\050\001\002\000\010\006" +
    "\uffec\057\uffec\061\uffec\001\002\000\004\033\uffd7\001\002" +
    "\000\004\057\061\001\002\000\030\006\uffe8\011\042\013" +
    "\035\014\054\020\041\026\037\030\034\032\043\056\055" +
    "\057\uffe8\061\uffe8\001\002\000\010\006\uffe7\057\uffe7\061" +
    "\uffe7\001\002\000\004\032\043\001\002\000\004\034\065" +
    "\001\002\000\020\004\066\016\075\017\100\030\034\032" +
    "\101\050\077\054\102\001\002\000\042\033\uffbd\034\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\055\uffbd" +
    "\057\uffbd\001\002\000\042\033\uffc2\034\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\051\uffc2\052\uffc2\055\uffc2\057\uffc2\001" +
    "\002\000\042\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\052\125\055\uffc4\057\uffc4\001\002\000\010" +
    "\034\147\036\106\037\105\001\002\000\040\033\uffc6\034" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\123\055\uffc6\057" +
    "\uffc6\001\002\000\036\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\115\043\117\044\114\045\116\046" +
    "\121\047\120\055\uffcd\057\uffcd\001\002\000\022\033\uffd0" +
    "\034\uffd0\036\uffd0\037\uffd0\040\111\041\112\055\uffd0\057" +
    "\uffd0\001\002\000\042\033\uffbb\034\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\051\uffbb\052\uffbb\055\uffbb\057\uffbb\001\002" +
    "\000\042\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\051\uffb8\052\uffb8\055\uffb8\057\uffb8\001\002\000\016\004" +
    "\066\016\075\017\100\030\034\032\101\054\143\001\002" +
    "\000\042\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\055\uffbc\057\uffbc\001\002\000\044\033" +
    "\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052" +
    "\uffba\055\uffba\056\137\057\uffba\001\002\000\020\004\066" +
    "\016\075\017\100\030\034\032\101\050\077\054\102\001" +
    "\002\000\042\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\051\uffc1\052\uffc1\055\uffc1\057\uffc1\001\002\000\010" +
    "\036\106\037\105\055\107\001\002\000\020\004\066\016" +
    "\075\017\100\030\034\032\101\050\077\054\102\001\002" +
    "\000\020\004\066\016\075\017\100\030\034\032\101\050" +
    "\077\054\102\001\002\000\042\033\uffc0\034\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\055\uffc0\057\uffc0" +
    "\001\002\000\022\033\uffd2\034\uffd2\036\uffd2\037\uffd2\040" +
    "\111\041\112\055\uffd2\057\uffd2\001\002\000\020\004\066" +
    "\016\075\017\100\030\034\032\101\050\077\054\102\001" +
    "\002\000\020\004\066\016\075\017\100\030\034\032\101" +
    "\050\077\054\102\001\002\000\036\033\uffce\034\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\115\043\117\044\114" +
    "\045\116\046\121\047\120\055\uffce\057\uffce\001\002\000" +
    "\020\004\066\016\075\017\100\030\034\032\101\050\077" +
    "\054\102\001\002\000\020\004\066\016\075\017\100\030" +
    "\034\032\101\050\077\054\102\001\002\000\020\004\066" +
    "\016\075\017\100\030\034\032\101\050\077\054\102\001" +
    "\002\000\020\004\066\016\075\017\100\030\034\032\101" +
    "\050\077\054\102\001\002\000\020\004\066\016\075\017" +
    "\100\030\034\032\101\050\077\054\102\001\002\000\020" +
    "\004\066\016\075\017\100\030\034\032\101\050\077\054" +
    "\102\001\002\000\040\033\uffc8\034\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\051\123\055\uffc8\057\uffc8\001\002\000\020" +
    "\004\066\016\075\017\100\030\034\032\101\050\077\054" +
    "\102\001\002\000\042\033\uffc5\034\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\051\uffc5\052\125\055\uffc5\057\uffc5\001\002" +
    "\000\020\004\066\016\075\017\100\030\034\032\101\050" +
    "\077\054\102\001\002\000\042\033\uffc3\034\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\055\uffc3\057\uffc3" +
    "\001\002\000\040\033\uffc7\034\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\051\123\055\uffc7\057\uffc7\001\002\000\040\033" +
    "\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\123\055" +
    "\uffcb\057\uffcb\001\002\000\040\033\uffc9\034\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\051\123\055\uffc9\057\uffc9\001\002" +
    "\000\040\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\051\123\055\uffcc\057\uffcc\001\002\000\040\033\uffca\034" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\051\123\055\uffca\057" +
    "\uffca\001\002\000\036\033\uffcf\034\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\115\043\117\044\114\045\116\046" +
    "\121\047\120\055\uffcf\057\uffcf\001\002\000\022\033\uffd1" +
    "\034\uffd1\036\uffd1\037\uffd1\040\111\041\112\055\uffd1\057" +
    "\uffd1\001\002\000\042\033\uffb9\034\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\055\uffb9\057\uffb9\001\002" +
    "\000\004\004\140\001\002\000\004\057\141\001\002\000" +
    "\050\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\137\057\uffdc" +
    "\001\002\000\046\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\057" +
    "\uffdd\001\002\000\020\004\066\016\075\017\100\030\034" +
    "\032\101\050\077\054\102\001\002\000\042\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\055" +
    "\uffbf\057\uffbf\001\002\000\010\036\106\037\105\055\146" +
    "\001\002\000\042\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\051\uffbe\052\uffbe\055\uffbe\057\uffbe\001\002\000" +
    "\004\032\043\001\002\000\004\055\151\001\002\000\004" +
    "\015\152\001\002\000\004\056\153\001\002\000\024\011" +
    "\042\013\035\014\054\020\041\026\037\030\034\032\043" +
    "\056\055\060\050\001\002\000\004\057\155\001\002\000" +
    "\004\033\uffb4\001\002\000\010\005\ufff9\010\ufff9\031\ufff9" +
    "\001\002\000\004\035\160\001\002\000\010\022\020\023" +
    "\021\027\022\001\002\000\004\061\171\001\002\000\004" +
    "\033\167\001\002\000\004\032\166\001\002\000\004\032" +
    "\165\001\002\000\004\033\uffe3\001\002\000\004\033\uffe4" +
    "\001\002\000\012\022\020\023\021\027\022\061\uffe6\001" +
    "\002\000\004\061\uffe5\001\002\000\022\011\uffeb\013\uffeb" +
    "\014\uffeb\020\uffeb\026\uffeb\030\uffeb\032\uffeb\056\uffeb\001" +
    "\002\000\030\006\uffea\011\042\013\035\014\054\020\041" +
    "\026\037\030\034\032\043\056\055\057\uffea\061\uffea\001" +
    "\002\000\010\006\uffe9\057\uffe9\061\uffe9\001\002\000\010" +
    "\006\uffed\057\uffed\061\uffed\001\002\000\004\053\200\001" +
    "\002\000\020\004\066\016\075\017\100\030\034\032\101" +
    "\050\077\054\102\001\002\000\014\033\uffd4\034\uffd4\036" +
    "\106\037\105\055\uffd4\001\002\000\020\004\066\016\075" +
    "\017\100\030\034\032\101\050\077\054\102\001\002\000" +
    "\014\033\uffd3\034\uffd3\036\106\037\105\055\uffd3\001\002" +
    "\000\020\004\066\016\075\017\100\030\034\032\101\050" +
    "\077\054\102\001\002\000\010\036\106\037\105\055\204" +
    "\001\002\000\004\015\205\001\002\000\004\056\206\001" +
    "\002\000\024\011\042\013\035\014\054\020\041\026\037" +
    "\030\034\032\043\056\055\060\050\001\002\000\004\057" +
    "\210\001\002\000\006\012\211\033\uffb7\001\002\000\004" +
    "\056\212\001\002\000\024\011\042\013\035\014\054\020" +
    "\041\026\037\030\034\032\043\056\055\060\050\001\002" +
    "\000\004\057\214\001\002\000\004\033\uffb6\001\002\000" +
    "\004\032\216\001\002\000\004\055\217\001\002\000\004" +
    "\021\221\001\002\000\004\033\uffb3\001\002\000\004\004" +
    "\222\001\002\000\004\035\223\001\002\000\004\056\224" +
    "\001\002\000\024\011\042\013\035\014\054\020\041\026" +
    "\037\030\034\032\043\056\055\060\050\001\002\000\004" +
    "\057\226\001\002\000\006\021\221\033\uffb1\001\002\000" +
    "\004\033\uffb2\001\002\000\010\033\uffaa\036\106\037\105" +
    "\001\002\000\020\004\066\016\075\017\100\030\034\032" +
    "\101\050\077\054\102\001\002\000\010\036\106\037\105" +
    "\055\233\001\002\000\004\015\234\001\002\000\004\056" +
    "\235\001\002\000\024\011\042\013\035\014\054\020\041" +
    "\026\037\030\034\032\043\056\055\060\050\001\002\000" +
    "\004\057\237\001\002\000\004\033\uffb5\001\002\000\004" +
    "\056\241\001\002\000\022\004\066\016\075\017\100\030" +
    "\034\032\101\050\077\054\102\057\uffad\001\002\000\004" +
    "\057\250\001\002\000\012\034\244\036\106\037\105\057" +
    "\uffae\001\002\000\020\004\066\016\075\017\100\030\034" +
    "\032\101\050\077\054\102\001\002\000\004\057\uffaf\001" +
    "\002\000\012\034\244\036\106\037\105\057\uffab\001\002" +
    "\000\004\057\uffac\001\002\000\042\033\uffb0\034\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\055\uffb0\057" +
    "\uffb0\001\002\000\006\034\252\057\ufff5\001\002\000\010" +
    "\022\020\023\021\027\022\001\002\000\004\057\ufff6\001" +
    "\002\000\004\032\260\001\002\000\004\032\256\001\002" +
    "\000\006\034\252\057\ufff1\001\002\000\004\057\ufff0\001" +
    "\002\000\006\034\252\057\ufff3\001\002\000\004\057\ufff2" +
    "\001\002\000\006\034\252\057\ufff7\001\002\000\004\057" +
    "\ufff8\001\002\000\004\032\uffde\001\002\000\004\032\uffdf" +
    "\001\002\000\004\005\ufffc\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002\000\004\006\272\001\002" +
    "\000\004\002\uffee\001\002\000\004\032\274\001\002\000" +
    "\004\053\275\001\002\000\020\004\066\016\075\017\100" +
    "\030\034\032\101\050\077\054\102\001\002\000\010\033" +
    "\277\036\106\037\105\001\002\000\010\005\uffef\010\uffef" +
    "\031\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\014\002\006\003\005\004\012\007\007\010" +
    "\010\001\001\000\004\016\272\001\001\000\030\011\270" +
    "\012\043\013\055\021\044\022\051\032\052\033\037\034" +
    "\045\035\056\037\046\042\035\001\001\000\004\010\267" +
    "\001\001\000\002\001\001\000\010\003\265\004\012\007" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\013\004\012\007\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\024\016\022" +
    "\017\023\001\001\000\004\020\264\001\001\000\004\020" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\050\012\043\013\055\021\044\022" +
    "\051\032\052\033\037\034\045\035\056\037\046\042\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\227\024\073\025\072\026\071\027\067" +
    "\030\066\031\102\037\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\174\001\001" +
    "\000\024\013\173\021\044\022\051\032\052\033\037\034" +
    "\045\035\056\037\046\042\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\057\012\043\013\055\021\044\022" +
    "\051\032\052\033\037\034\045\035\056\037\046\042\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\013\061\021\044\022\051\032\052\033\037" +
    "\034\045\035\056\037\046\042\035\001\001\000\002\001" +
    "\001\000\004\022\063\001\001\000\002\001\001\000\022" +
    "\023\070\024\073\025\072\026\071\027\067\030\066\031" +
    "\102\037\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\143\037\075\001\001\000\002\001" +
    "\001\000\004\020\135\001\001\000\022\023\103\024\073" +
    "\025\072\026\071\027\067\030\066\031\102\037\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\024\134" +
    "\025\072\026\071\027\067\030\066\031\102\037\075\001" +
    "\001\000\020\024\107\025\072\026\071\027\067\030\066" +
    "\031\102\037\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\025\133\026\071\027\067\030\066\031\102" +
    "\037\075\001\001\000\016\025\112\026\071\027\067\030" +
    "\066\031\102\037\075\001\001\000\002\001\001\000\014" +
    "\026\132\027\067\030\066\031\102\037\075\001\001\000" +
    "\014\026\131\027\067\030\066\031\102\037\075\001\001" +
    "\000\014\026\130\027\067\030\066\031\102\037\075\001" +
    "\001\000\014\026\127\027\067\030\066\031\102\037\075" +
    "\001\001\000\014\026\126\027\067\030\066\031\102\037" +
    "\075\001\001\000\014\026\121\027\067\030\066\031\102" +
    "\037\075\001\001\000\002\001\001\000\012\027\123\030" +
    "\066\031\102\037\075\001\001\000\002\001\001\000\010" +
    "\030\125\031\102\037\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\141\001\001\000\002\001\001\000\022\023" +
    "\144\024\073\025\072\026\071\027\067\030\066\031\102" +
    "\037\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\153\012" +
    "\043\013\055\021\044\022\051\032\052\033\037\034\045" +
    "\035\056\037\046\042\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\160\015\161\016\162\017\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\167\015" +
    "\161\016\162\017\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\013\172\021\044\022\051\032\052\033" +
    "\037\034\045\035\056\037\046\042\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\176\024\073\025\072\026\071\027\067\030\066\031\102" +
    "\037\075\001\001\000\002\001\001\000\022\023\200\024" +
    "\073\025\072\026\071\027\067\030\066\031\102\037\075" +
    "\001\001\000\002\001\001\000\022\023\202\024\073\025" +
    "\072\026\071\027\067\030\066\031\102\037\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\206\012\043\013\055\021\044\022\051\032\052" +
    "\033\037\034\045\035\056\037\046\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\212\012\043\013\055\021\044\022\051\032\052\033" +
    "\037\034\045\035\056\037\046\042\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\011" +
    "\224\012\043\013\055\021\044\022\051\032\052\033\037" +
    "\034\045\035\056\037\046\042\035\001\001\000\002\001" +
    "\001\000\004\036\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\231\024\073\025\072\026\071\027" +
    "\067\030\066\031\102\037\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\235\012" +
    "\043\013\055\021\044\022\051\032\052\033\037\034\045" +
    "\035\056\037\046\042\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\023\242\024\073" +
    "\025\072\026\071\027\067\030\066\031\102\037\075\040" +
    "\241\001\001\000\002\001\001\000\004\041\244\001\001" +
    "\000\022\023\245\024\073\025\072\026\071\027\067\030" +
    "\066\031\102\037\075\001\001\000\002\001\001\000\004" +
    "\041\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\252\001\001\000\006\016\253\017\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\256\001\001\000\002\001\001\000\004\006\260" +
    "\001\001\000\002\001\001\000\004\006\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\023\275\024\073\025\072\026\071\027\067\030" +
    "\066\031\102\037\075\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CuerpoEntero ::= decFuncionesCtes CuerpoPrograma 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FullBody((FuncionesAndCtes)df, (Programa)cp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoEntero",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CuerpoEntero EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CuerpoEntero ::= CuerpoPrograma 
            {
              Object RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new FullBody((Programa)cp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoEntero",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CuerpoEntero ::= 
            {
              Object RESULT =null;
		 RESULT = new FullBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoEntero",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decFuncionesCtes ::= decFun decFuncionesCtes 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncionesAndCtes((Funtion)f , (FuncionesAndCtes)df); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFuncionesCtes",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decFuncionesCtes ::= decCte decFuncionesCtes 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncionesAndCtes((Constante)c , (FuncionesAndCtes)df); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFuncionesCtes",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decFuncionesCtes ::= decFun 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncionesAndCtes((Funtion)f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFuncionesCtes",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decFuncionesCtes ::= decCte 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncionesAndCtes((Constante)c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFuncionesCtes",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decFun ::= FUN ID RECIVES CORAP parametrosEntrada1 CORCE RETURNS Tv LLAVAP Bloque LLAVCE 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Funtion( (String) iden , (Parametros)p1  , (TipoVar)ps ,(ClaseBloque)bl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFun",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametrosEntrada1 ::= Tv ID masParametros1 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tip, (String)iden, (Parametros)mp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametrosEntrada1 ::= Tv ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tip, (String)iden); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametrosEntrada1 ::= Tarray ID masParametros1 
            {
              Object RESULT =null;
		int tarrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tarrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tarr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tarr, (String)iden, (Parametros)mp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametrosEntrada1 ::= Tarray ID 
            {
              Object RESULT =null;
		int tarrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tarrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tarr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tarr, (String)iden); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametrosEntrada1 ::= 
            {
              Object RESULT =null;
		 RESULT = new Parametros(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // masParametros1 ::= COMA Tv ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tip, (String)iden); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masParametros1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // masParametros1 ::= COMA Tv ID masParametros1 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tip, (String)iden, (Parametros)mp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masParametros1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // masParametros1 ::= COMA Tarray ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tip, (String)iden); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masParametros1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // masParametros1 ::= COMA Tarray ID masParametros1 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros((Tipo)tip, (String)iden, (Parametros)mp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masParametros1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decCte ::= CONST Tv ID ASIG Expr PUNTOCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Constante((String)id, (Tipo)tip, (Expresion)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decCte",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CuerpoPrograma ::= BEGIN Bloque END 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Programa((ClaseBloque)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CuerpoPrograma",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bloque ::= decVar decBloque 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClaseBloque((DeclaracionVariables)dv, (DeclaracionBloque)dbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Bloque ::= decBloque 
            {
              Object RESULT =null;
		int dblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClaseBloque((DeclaracionBloque)dbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloque",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decVar ::= LLAVAP DECLARE DOSPUNTOS V LLAVCE 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decBloque ::= Instruccion PUNTOCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionBloque((ClaseInstruccion)i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decBloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decBloque ::= Instruccion PUNTOCOMA decBloque 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object db = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionBloque((ClaseInstruccion)i, (DeclaracionBloque)db); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decBloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decBloque ::= CORAP Bloque CORCE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionBloque((ClaseBloque)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decBloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decBloque ::= CORAP Bloque CORCE decBloque 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object db = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionBloque((ClaseBloque)b, (DeclaracionBloque)db); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decBloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // V ::= T PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVariables((Variable)tp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // V ::= T PUNTOCOMA V 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariables((Variable)tp, (DeclaracionVariables)vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T ::= Tv ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable((Tipo)tip, (String)iden); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T ::= Tarray ID 
            {
              Object RESULT =null;
		int tarrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tarrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tarr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable((Tipo)tarr, (String)iden); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tv ::= IDINT 
            {
              Object RESULT =null;
		int integeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intege = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoVar((String)intege); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tv ::= IDBOOL 
            {
              Object RESULT =null;
		int boolealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolearight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object boolea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoVar((String)boolea); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tv ::= NOTHING 
            {
              Object RESULT =null;
		 RESULT = new TipoVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tarray ::= IDINT dimensions 
            {
              Object RESULT =null;
		int integeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int integeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object intege = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoArray((String)intege, (ClaseDimensiones)d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tarray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Tarray ::= IDBOOL dimensions 
            {
              Object RESULT =null;
		int boolealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boolearight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object boolea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoArray((String)boolea, (ClaseDimensiones)d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tarray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dimensions ::= CORAP INT CORCE dimensions 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClaseDimensiones((String)size, (ClaseDimensiones)dim); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensions",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dimensions ::= CORAP INT CORCE 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClaseDimensiones((String)size); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensions",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= Asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= Ifelsent 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ifs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= whilent 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= fornt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= switchnt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= callfuncion 
            {
              Object RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cll = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cll; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= instrRet 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Asignacion ::= ID ASIG Expr 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InsAsignacion((String)iden, (Expresion)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Asignacion ::= ID dimensions ASIG Expr 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InsAsignacion((String)iden,(ClaseDimensiones)d ,(Expresion)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr SUMA Expr1 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e0,(Expresion)e1, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr RESTA Expr1 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e0,(Expresion)e1, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr1 ::= Expr1 MULT Expr2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e1, (Expresion)e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr1 ::= Expr1 DIV Expr2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e1, (Expresion)e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr1 ::= Expr2 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr2 ::= Expr2 MENORIG Expr3 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e2, (Expresion)e3, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr2 ::= Expr2 MAYIG Expr3 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e2, (Expresion)e3, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr2 ::= Expr2 MEN Expr3 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e2, (Expresion)e3, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= Expr2 MAY Expr3 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e2, (Expresion)e3, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= Expr2 IG Expr3 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e2, (Expresion)e3, "="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= Expr2 NOIG Expr3 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e2, (Expresion)e3, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= Expr3 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr3 ::= Expr3 AND Expr4 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e3, (Expresion)e4, "AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr3 ::= Expr4 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr4 ::= Expr4 OR Expr5 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionBinaria((Expresion)e4, (Expresion)e5, "OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr4 ::= Expr5 
            {
              Object RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e5; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr5 ::= EFin 
            {
              Object RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ef; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr5 ::= PARAP Expr PARCE 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionUnaria((Expresion)e0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr5 ::= NEGAR EFin 
            {
              Object RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((Expresion)ef , "!!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr5 ::= NEGAR PARAP Expr PARCE 
            {
              Object RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionUnaria((Expresion)e0 , "!!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EFin ::= INT 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((String)integer, "int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EFin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EFin ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((String)f, "bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EFin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EFin ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((String)t, "bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EFin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EFin ::= ID 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((String)iden, "identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EFin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EFin ::= ID dimensions 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((String)iden, (ClaseDimensiones)dim); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EFin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EFin ::= callfuncion 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionUnaria((InstruccionCall)cf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EFin",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Ifelsent ::= IF PARAP Expr PARCE DO CORAP Bloque CORCE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstruccionIfElse((Expresion)e, (ClaseBloque)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ifelsent",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Ifelsent ::= IF PARAP Expr PARCE DO CORAP Bloque CORCE ELSE CORAP Bloque CORCE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstruccionIfElse((Expresion)e, (ClaseBloque)b1 ,(ClaseBloque)b2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ifelsent",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // whilent ::= WHILE PARAP Expr PARCE DO CORAP Bloque CORCE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstruccionWhile((Expresion)e, (ClaseBloque)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fornt ::= FOR PARAP Asignacion COMA Expr COMA Asignacion PARCE DO CORAP Bloque CORCE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstruccionFor((InsAsignacion)a1, (Expresion)e, (InsAsignacion)a2, (ClaseBloque)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fornt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // switchnt ::= SWITCH PARAP ID PARCE cs 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionSwitch((String)iden, (ClaseCases)c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchnt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cs ::= CASE INT DOSPUNTOS CORAP Bloque CORCE cs 
            {
              Object RESULT =null;
		int enterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int enterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object enter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClaseCases((String)enter, (ClaseBloque)b, (ClaseCases)c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cs ::= CASE INT DOSPUNTOS CORAP Bloque CORCE 
            {
              Object RESULT =null;
		int enterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int enterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object enter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClaseCases((String)enter,(ClaseBloque)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cs",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // callfuncion ::= CALL ID CORAP parametrosEntrada2 CORCE 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object iden = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int entrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int entrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object entr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstruccionCall((String)iden, (ListaExpresiones)entr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callfuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametrosEntrada2 ::= Expr masParametros2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaExpresiones((Expresion)e, (ListaExpresiones)mp ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametrosEntrada2 ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaExpresiones((Expresion)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametrosEntrada2 ::= 
            {
              Object RESULT =null;
		 RESULT = new ListaExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosEntrada2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // masParametros2 ::= COMA Expr masParametros2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaExpresiones((Expresion)e, (ListaExpresiones)mp ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masParametros2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // masParametros2 ::= COMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaExpresiones((Expresion)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masParametros2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instrRet ::= RETURN Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionReturn((Expresion)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrRet",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
